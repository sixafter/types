// Copyright 2020-2024 SIX AFTER, INC (SIX AFTER)
//
// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: SIX AFTER, INC (SIX AFTER)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: country.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The `Country` message represents a country as defined by the ISO-3166-1 standard.
// It is commonly used for internationalization, geolocation, and regulatory purposes.
type Country struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The commonly used name of the country.
	// Example: "United States".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The formal or official name of the country.
	// Example: "United States of America".
	FormalName string `protobuf:"bytes,2,opt,name=formal_name,json=formalName,proto3" json:"formal_name,omitempty"`
	// The ISO 3166-1 alpha-2 code for the country.
	// This is a two-letter country code commonly used in international standards and systems.
	// Example: "US" for the United States.
	AlphabeticCode_2 string `protobuf:"bytes,3,opt,name=alphabetic_code_2,json=alphabeticCode2,proto3" json:"alphabetic_code_2,omitempty"`
	// The ISO 3166-1 alpha-3 code for the country.
	// This is a three-letter country code that offers more specificity than the alpha-2 code.
	// Example: "USA" for the United States.
	AlphabeticCode_3 string `protobuf:"bytes,4,opt,name=alphabetic_code_3,json=alphabeticCode3,proto3" json:"alphabetic_code_3,omitempty"`
	// The ISO 3166-1 numeric code for the country.
	// This is a three-digit code that is language-neutral and often used in databases or systems
	// where numeric identifiers are preferred.
	// Example: 840 for the United States.
	NumericCode   uint32 `protobuf:"varint,5,opt,name=numeric_code,json=numericCode,proto3" json:"numeric_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Country) Reset() {
	*x = Country{}
	mi := &file_country_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Country) ProtoMessage() {}

func (x *Country) ProtoReflect() protoreflect.Message {
	mi := &file_country_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Country.ProtoReflect.Descriptor instead.
func (*Country) Descriptor() ([]byte, []int) {
	return file_country_proto_rawDescGZIP(), []int{0}
}

func (x *Country) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Country) GetFormalName() string {
	if x != nil {
		return x.FormalName
	}
	return ""
}

func (x *Country) GetAlphabeticCode_2() string {
	if x != nil {
		return x.AlphabeticCode_2
	}
	return ""
}

func (x *Country) GetAlphabeticCode_3() string {
	if x != nil {
		return x.AlphabeticCode_3
	}
	return ""
}

func (x *Country) GetNumericCode() uint32 {
	if x != nil {
		return x.NumericCode
	}
	return 0
}

var File_country_proto protoreflect.FileDescriptor

const file_country_proto_rawDesc = "" +
	"\n" +
	"\rcountry.proto\x12\x0esixafter.types\"\xb9\x01\n" +
	"\aCountry\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1f\n" +
	"\vformal_name\x18\x02 \x01(\tR\n" +
	"formalName\x12*\n" +
	"\x11alphabetic_code_2\x18\x03 \x01(\tR\x0falphabeticCode2\x12*\n" +
	"\x11alphabetic_code_3\x18\x04 \x01(\tR\x0falphabeticCode3\x12!\n" +
	"\fnumeric_code\x18\x05 \x01(\rR\vnumericCodeBn\n" +
	"\x12com.sixafter.typesB\fCountryProtoP\x01Z\x1fgithub.com/sixafter/types;types\xf8\x01\x01\xa2\x02\x03TPB\xaa\x02\x1dSixAfter.Types.WellKnownTypesb\x06proto3"

var (
	file_country_proto_rawDescOnce sync.Once
	file_country_proto_rawDescData []byte
)

func file_country_proto_rawDescGZIP() []byte {
	file_country_proto_rawDescOnce.Do(func() {
		file_country_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_country_proto_rawDesc), len(file_country_proto_rawDesc)))
	})
	return file_country_proto_rawDescData
}

var file_country_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_country_proto_goTypes = []any{
	(*Country)(nil), // 0: sixafter.types.Country
}
var file_country_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_country_proto_init() }
func file_country_proto_init() {
	if File_country_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_country_proto_rawDesc), len(file_country_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_country_proto_goTypes,
		DependencyIndexes: file_country_proto_depIdxs,
		MessageInfos:      file_country_proto_msgTypes,
	}.Build()
	File_country_proto = out.File
	file_country_proto_goTypes = nil
	file_country_proto_depIdxs = nil
}
