// Copyright 2020-2024 SIX AFTER, INC (SIX AFTER)
//
// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: SIX AFTER, INC (SIX AFTER)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v6.31.1
// source: time_zone.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The `TimeZone` message represents a time zone, which is an area
// observing a uniform standard time for legal, commercial, and social purposes.
type TimeZone struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the time zone.
	// Example: "America/New_York".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The common abbreviation for the time zone.
	// Example: "EST" for Eastern Standard Time or "EDT" for Eastern Daylight Time.
	Abbreviation string `protobuf:"bytes,2,opt,name=abbreviation,proto3" json:"abbreviation,omitempty"`
	// The Standard Time (STD) offset from UTC, in hours and minutes.
	// This represents the time zone's offset when daylight saving time is not in effect.
	// Example: For "America/New_York", the standard time offset is UTC-5.
	UtcOffsetStd *TimeZone_TimeOffset `protobuf:"bytes,3,opt,name=utc_offset_std,json=utcOffsetStd,proto3" json:"utc_offset_std,omitempty"`
	// The Daylight Saving Time (DST) offset from UTC, in hours and minutes.
	// This represents the time zone's offset when daylight saving time is in effect.
	// Example: For "America/New_York", the daylight saving time offset is UTC-4.
	UtcOffsetDst *TimeZone_TimeOffset `protobuf:"bytes,4,opt,name=utc_offset_dst,json=utcOffsetDst,proto3" json:"utc_offset_dst,omitempty"`
	// The geographic coordinates of the time zone's central point.
	// This is commonly used to determine the time zone based on location.
	CentralCoordinate *GeospatialCoordinate `protobuf:"bytes,5,opt,name=central_coordinate,json=centralCoordinate,proto3" json:"central_coordinate,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TimeZone) Reset() {
	*x = TimeZone{}
	mi := &file_time_zone_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeZone) ProtoMessage() {}

func (x *TimeZone) ProtoReflect() protoreflect.Message {
	mi := &file_time_zone_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeZone.ProtoReflect.Descriptor instead.
func (*TimeZone) Descriptor() ([]byte, []int) {
	return file_time_zone_proto_rawDescGZIP(), []int{0}
}

func (x *TimeZone) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TimeZone) GetAbbreviation() string {
	if x != nil {
		return x.Abbreviation
	}
	return ""
}

func (x *TimeZone) GetUtcOffsetStd() *TimeZone_TimeOffset {
	if x != nil {
		return x.UtcOffsetStd
	}
	return nil
}

func (x *TimeZone) GetUtcOffsetDst() *TimeZone_TimeOffset {
	if x != nil {
		return x.UtcOffsetDst
	}
	return nil
}

func (x *TimeZone) GetCentralCoordinate() *GeospatialCoordinate {
	if x != nil {
		return x.CentralCoordinate
	}
	return nil
}

// The `TimeOffset` message represents a time offset from Coordinated
// Universal Time (UTC) in terms of hours and minutes.
type TimeZone_TimeOffset struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The offset from UTC in whole hours.
	// Example: -5 for UTC-5 (Eastern Standard Time).
	Hours int32 `protobuf:"varint,1,opt,name=hours,proto3" json:"hours,omitempty"`
	// The additional offset from UTC in minutes.
	// Example: 30 for UTC+5:30 (India Standard Time).
	Minutes       int32 `protobuf:"varint,2,opt,name=minutes,proto3" json:"minutes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeZone_TimeOffset) Reset() {
	*x = TimeZone_TimeOffset{}
	mi := &file_time_zone_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeZone_TimeOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeZone_TimeOffset) ProtoMessage() {}

func (x *TimeZone_TimeOffset) ProtoReflect() protoreflect.Message {
	mi := &file_time_zone_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeZone_TimeOffset.ProtoReflect.Descriptor instead.
func (*TimeZone_TimeOffset) Descriptor() ([]byte, []int) {
	return file_time_zone_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TimeZone_TimeOffset) GetHours() int32 {
	if x != nil {
		return x.Hours
	}
	return 0
}

func (x *TimeZone_TimeOffset) GetMinutes() int32 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

var File_time_zone_proto protoreflect.FileDescriptor

const file_time_zone_proto_rawDesc = "" +
	"\n" +
	"\x0ftime_zone.proto\x12\x0esixafter.types\x1a\x1bgeospatial_coordinate.proto\"\xeb\x02\n" +
	"\bTimeZone\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\"\n" +
	"\fabbreviation\x18\x02 \x01(\tR\fabbreviation\x12I\n" +
	"\x0eutc_offset_std\x18\x03 \x01(\v2#.sixafter.types.TimeZone.TimeOffsetR\futcOffsetStd\x12I\n" +
	"\x0eutc_offset_dst\x18\x04 \x01(\v2#.sixafter.types.TimeZone.TimeOffsetR\futcOffsetDst\x12S\n" +
	"\x12central_coordinate\x18\x05 \x01(\v2$.sixafter.types.GeospatialCoordinateR\x11centralCoordinate\x1a<\n" +
	"\n" +
	"TimeOffset\x12\x14\n" +
	"\x05hours\x18\x01 \x01(\x05R\x05hours\x12\x18\n" +
	"\aminutes\x18\x02 \x01(\x05R\aminutesBo\n" +
	"\x12com.sixafter.typesB\rTimeZoneProtoP\x01Z\x1fgithub.com/sixafter/types;types\xf8\x01\x01\xa2\x02\x03TPB\xaa\x02\x1dSixAfter.Types.WellKnownTypesb\x06proto3"

var (
	file_time_zone_proto_rawDescOnce sync.Once
	file_time_zone_proto_rawDescData []byte
)

func file_time_zone_proto_rawDescGZIP() []byte {
	file_time_zone_proto_rawDescOnce.Do(func() {
		file_time_zone_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_time_zone_proto_rawDesc), len(file_time_zone_proto_rawDesc)))
	})
	return file_time_zone_proto_rawDescData
}

var file_time_zone_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_time_zone_proto_goTypes = []any{
	(*TimeZone)(nil),             // 0: sixafter.types.TimeZone
	(*TimeZone_TimeOffset)(nil),  // 1: sixafter.types.TimeZone.TimeOffset
	(*GeospatialCoordinate)(nil), // 2: sixafter.types.GeospatialCoordinate
}
var file_time_zone_proto_depIdxs = []int32{
	1, // 0: sixafter.types.TimeZone.utc_offset_std:type_name -> sixafter.types.TimeZone.TimeOffset
	1, // 1: sixafter.types.TimeZone.utc_offset_dst:type_name -> sixafter.types.TimeZone.TimeOffset
	2, // 2: sixafter.types.TimeZone.central_coordinate:type_name -> sixafter.types.GeospatialCoordinate
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_time_zone_proto_init() }
func file_time_zone_proto_init() {
	if File_time_zone_proto != nil {
		return
	}
	file_geospatial_coordinate_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_time_zone_proto_rawDesc), len(file_time_zone_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_time_zone_proto_goTypes,
		DependencyIndexes: file_time_zone_proto_depIdxs,
		MessageInfos:      file_time_zone_proto_msgTypes,
	}.Build()
	File_time_zone_proto = out.File
	file_time_zone_proto_goTypes = nil
	file_time_zone_proto_depIdxs = nil
}
