// Copyright 2020-2024 SIX AFTER, INC (SIX AFTER)
//
// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: SIX AFTER, INC (SIX AFTER)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: geofence.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The `Geofence` message represents a virtual boundary around a geographic area.
// Geofences are used in applications such as location-based services, navigation,
// and geo-restriction.
type Geofence struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the geofence.
	// Example: "Campus Zone", "Restricted Area".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The set of polygons that define the geofence.
	// A geofence may consist of one or more polygons, where each polygon represents
	// a distinct area. The polygons can define complex, multi-vertex boundaries.
	// Example: A campus geofence with multiple disconnected zones.
	Polygon       []*MapPolygon `protobuf:"bytes,2,rep,name=polygon,proto3" json:"polygon,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Geofence) Reset() {
	*x = Geofence{}
	mi := &file_geofence_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Geofence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Geofence) ProtoMessage() {}

func (x *Geofence) ProtoReflect() protoreflect.Message {
	mi := &file_geofence_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Geofence.ProtoReflect.Descriptor instead.
func (*Geofence) Descriptor() ([]byte, []int) {
	return file_geofence_proto_rawDescGZIP(), []int{0}
}

func (x *Geofence) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Geofence) GetPolygon() []*MapPolygon {
	if x != nil {
		return x.Polygon
	}
	return nil
}

var File_geofence_proto protoreflect.FileDescriptor

const file_geofence_proto_rawDesc = "" +
	"\n" +
	"\x0egeofence.proto\x12\x0esixafter.types\x1a\x11map_polygon.proto\"T\n" +
	"\bGeofence\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x124\n" +
	"\apolygon\x18\x02 \x03(\v2\x1a.sixafter.types.MapPolygonR\apolygonBo\n" +
	"\x12com.sixafter.typesB\rGeofenceProtoP\x01Z\x1fgithub.com/sixafter/types;types\xf8\x01\x01\xa2\x02\x03TPB\xaa\x02\x1dSixAfter.Types.WellKnownTypesb\x06proto3"

var (
	file_geofence_proto_rawDescOnce sync.Once
	file_geofence_proto_rawDescData []byte
)

func file_geofence_proto_rawDescGZIP() []byte {
	file_geofence_proto_rawDescOnce.Do(func() {
		file_geofence_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_geofence_proto_rawDesc), len(file_geofence_proto_rawDesc)))
	})
	return file_geofence_proto_rawDescData
}

var file_geofence_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_geofence_proto_goTypes = []any{
	(*Geofence)(nil),   // 0: sixafter.types.Geofence
	(*MapPolygon)(nil), // 1: sixafter.types.MapPolygon
}
var file_geofence_proto_depIdxs = []int32{
	1, // 0: sixafter.types.Geofence.polygon:type_name -> sixafter.types.MapPolygon
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_geofence_proto_init() }
func file_geofence_proto_init() {
	if File_geofence_proto != nil {
		return
	}
	file_map_polygon_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_geofence_proto_rawDesc), len(file_geofence_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_geofence_proto_goTypes,
		DependencyIndexes: file_geofence_proto_depIdxs,
		MessageInfos:      file_geofence_proto_msgTypes,
	}.Build()
	File_geofence_proto = out.File
	file_geofence_proto_goTypes = nil
	file_geofence_proto_depIdxs = nil
}
