// Copyright 2020-2024 SIX AFTER, INC (SIX AFTER)
//
// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: SIX AFTER, INC (SIX AFTER)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: version.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The `Version` message represents a Semantic Versioning 2.0.0 compliant version number.
// For details, see: https://semver.org
type Version struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The major version number.
	//
	// Major version zero (0.y.z) is for initial development. Anything MAY change
	// at any time. The public API SHOULD NOT be considered stable.
	Major uint32 `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	// Minor version number.
	//
	// Minor version Y (x.Y.z | x > 0) MUST be incremented if new, backwards compatible
	// functionality is introduced to the public API. It MUST be incremented if any
	// public API functionality is marked as deprecated. It MAY be incremented if
	// substantial new functionality or improvements are introduced within the private
	// code. It MAY include patch level changes. Patch version MUST be reset to 0 when
	// minor version is incremented.
	Minor uint32 `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	// Patch version number.
	//
	// Patch version Z (x.y.Z | x > 0) MUST be incremented if only backwards compatible
	// bug fixes are introduced. A bug fix is defined as an internal change that fixes
	// incorrect behavior.
	Patch uint32 `protobuf:"varint,3,opt,name=patch,proto3" json:"patch,omitempty"`
	// The pre-release version identifier.
	//
	// A pre-release version MAY be denoted by appending a hyphen and a series of dot
	// separated identifiers immediately following the patch version. Identifiers MUST
	// comprise only ASCII alphanumerics and hyphens [0-9A-Za-z-]. Identifiers MUST NOT
	// be empty. Numeric identifiers MUST NOT include leading zeroes. Pre-release
	// versions have a lower precedence than the associated normal version.
	//
	// A pre-release version indicates that the version is unstable and might not satisfy
	// the intended compatibility requirements as denoted by its associated normal version.
	//
	// Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92, 1.0.0-x-y-z.–.
	Prerelease string `protobuf:"bytes,4,opt,name=prerelease,proto3" json:"prerelease,omitempty"`
	// The build metadata identifier.
	//
	// Build metadata MAY be denoted by appending a plus sign and a series of dot separated
	// identifiers immediately following the patch or pre-release version. Identifiers MUST
	// comprise only ASCII alphanumerics and hyphens [0-9A-Za-z-]. Identifiers MUST NOT be
	// empty.
	//
	// Build metadata MUST be ignored when determining version precedence. Thus two
	// versions that differ only in the build metadata, have the same precedence.
	//
	// Examples: 1.0.0-alpha+001, 1.0.0+20130313144700, 1.0.0-beta+exp.sha.5114f85,
	// 1.0.0+21AF26D3—-117B344092BD.
	BuildMetadata string `protobuf:"bytes,5,opt,name=build_metadata,json=buildMetadata,proto3" json:"build_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Version) Reset() {
	*x = Version{}
	mi := &file_version_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_version_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_version_proto_rawDescGZIP(), []int{0}
}

func (x *Version) GetMajor() uint32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *Version) GetMinor() uint32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *Version) GetPatch() uint32 {
	if x != nil {
		return x.Patch
	}
	return 0
}

func (x *Version) GetPrerelease() string {
	if x != nil {
		return x.Prerelease
	}
	return ""
}

func (x *Version) GetBuildMetadata() string {
	if x != nil {
		return x.BuildMetadata
	}
	return ""
}

var File_version_proto protoreflect.FileDescriptor

const file_version_proto_rawDesc = "" +
	"\n" +
	"\rversion.proto\x12\x0esixafter.types\"\x92\x01\n" +
	"\aVersion\x12\x14\n" +
	"\x05major\x18\x01 \x01(\rR\x05major\x12\x14\n" +
	"\x05minor\x18\x02 \x01(\rR\x05minor\x12\x14\n" +
	"\x05patch\x18\x03 \x01(\rR\x05patch\x12\x1e\n" +
	"\n" +
	"prerelease\x18\x04 \x01(\tR\n" +
	"prerelease\x12%\n" +
	"\x0ebuild_metadata\x18\x05 \x01(\tR\rbuildMetadataBn\n" +
	"\x12com.sixafter.typesB\fVersionProtoP\x01Z\x1fgithub.com/sixafter/types;types\xf8\x01\x01\xa2\x02\x03TPB\xaa\x02\x1dSixAfter.Types.WellKnownTypesb\x06proto3"

var (
	file_version_proto_rawDescOnce sync.Once
	file_version_proto_rawDescData []byte
)

func file_version_proto_rawDescGZIP() []byte {
	file_version_proto_rawDescOnce.Do(func() {
		file_version_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_version_proto_rawDesc), len(file_version_proto_rawDesc)))
	})
	return file_version_proto_rawDescData
}

var file_version_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_version_proto_goTypes = []any{
	(*Version)(nil), // 0: sixafter.types.Version
}
var file_version_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_version_proto_init() }
func file_version_proto_init() {
	if File_version_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_version_proto_rawDesc), len(file_version_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_version_proto_goTypes,
		DependencyIndexes: file_version_proto_depIdxs,
		MessageInfos:      file_version_proto_msgTypes,
	}.Build()
	File_version_proto = out.File
	file_version_proto_goTypes = nil
	file_version_proto_depIdxs = nil
}
