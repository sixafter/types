// Copyright 2020-2024 SIX AFTER, INC (SIX AFTER)
//
// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: SIX AFTER, INC (SIX AFTER)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.0
// source: compass_heading.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The `CompassHeading` message represents the orientation of an object
// in the Compass Geodetic System (CGS). This can be used in geolocation
// systems, navigation tools, or applications requiring orientation data.
type CompassHeading struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The heading (measured in degrees) relative to magnetic north.
	// Values range from 0 to 360, where 0 indicates north, 90 indicates east,
	// 180 indicates south, and 270 indicates west.
	MagneticHeading float32 `protobuf:"fixed32,1,opt,name=magnetic_heading,json=magneticHeading,proto3" json:"magnetic_heading,omitempty"`
	// The heading (measured in degrees) relative to true north.
	// This compensates for the local magnetic declination.
	// Similar to `magnetic_heading`, values range from 0 to 360.
	TrueHeading float32 `protobuf:"fixed32,2,opt,name=true_heading,json=trueHeading,proto3" json:"true_heading,omitempty"`
	// The maximum deviation (measured in degrees) between the reported heading
	// and the true geomagnetic heading. A lower value indicates higher accuracy.
	// This property is essential for assessing the reliability of the heading data.
	HeadingAccuracy float32 `protobuf:"fixed32,3,opt,name=heading_accuracy,json=headingAccuracy,proto3" json:"heading_accuracy,omitempty"`
	// The time at which this heading measurement was taken.
	// This is useful for correlating heading data with other time-based
	// measurements or events.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The geomagnetic field strength (measured in microteslas) along the x-axis.
	// This represents the horizontal magnetic component and can be used to derive
	// the magnetic field vector in combination with `y` and `z`.
	X float32 `protobuf:"fixed32,5,opt,name=x,proto3" json:"x,omitempty"`
	// The geomagnetic field strength (measured in microteslas) along the y-axis.
	// This represents the horizontal magnetic component perpendicular to the `x`-axis.
	Y float32 `protobuf:"fixed32,6,opt,name=y,proto3" json:"y,omitempty"`
	// The geomagnetic field strength (measured in microteslas) along the z-axis.
	// This represents the vertical magnetic component and is crucial for
	// determining the three-dimensional magnetic vector.
	Z             float32 `protobuf:"fixed32,7,opt,name=z,proto3" json:"z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompassHeading) Reset() {
	*x = CompassHeading{}
	mi := &file_compass_heading_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompassHeading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompassHeading) ProtoMessage() {}

func (x *CompassHeading) ProtoReflect() protoreflect.Message {
	mi := &file_compass_heading_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompassHeading.ProtoReflect.Descriptor instead.
func (*CompassHeading) Descriptor() ([]byte, []int) {
	return file_compass_heading_proto_rawDescGZIP(), []int{0}
}

func (x *CompassHeading) GetMagneticHeading() float32 {
	if x != nil {
		return x.MagneticHeading
	}
	return 0
}

func (x *CompassHeading) GetTrueHeading() float32 {
	if x != nil {
		return x.TrueHeading
	}
	return 0
}

func (x *CompassHeading) GetHeadingAccuracy() float32 {
	if x != nil {
		return x.HeadingAccuracy
	}
	return 0
}

func (x *CompassHeading) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CompassHeading) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *CompassHeading) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *CompassHeading) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

var File_compass_heading_proto protoreflect.FileDescriptor

const file_compass_heading_proto_rawDesc = "" +
	"\n" +
	"\x15compass_heading.proto\x12\x0esixafter.types\x1a\x1fgoogle/protobuf/timestamp.proto\"\xed\x01\n" +
	"\x0eCompassHeading\x12)\n" +
	"\x10magnetic_heading\x18\x01 \x01(\x02R\x0fmagneticHeading\x12!\n" +
	"\ftrue_heading\x18\x02 \x01(\x02R\vtrueHeading\x12)\n" +
	"\x10heading_accuracy\x18\x03 \x01(\x02R\x0fheadingAccuracy\x128\n" +
	"\ttimestamp\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\f\n" +
	"\x01x\x18\x05 \x01(\x02R\x01x\x12\f\n" +
	"\x01y\x18\x06 \x01(\x02R\x01y\x12\f\n" +
	"\x01z\x18\a \x01(\x02R\x01zBu\n" +
	"\x12com.sixafter.typesB\x13CompassHeadingProtoP\x01Z\x1fgithub.com/sixafter/types;types\xf8\x01\x01\xa2\x02\x03TPB\xaa\x02\x1dSixAfter.Types.WellKnownTypesb\x06proto3"

var (
	file_compass_heading_proto_rawDescOnce sync.Once
	file_compass_heading_proto_rawDescData []byte
)

func file_compass_heading_proto_rawDescGZIP() []byte {
	file_compass_heading_proto_rawDescOnce.Do(func() {
		file_compass_heading_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_compass_heading_proto_rawDesc), len(file_compass_heading_proto_rawDesc)))
	})
	return file_compass_heading_proto_rawDescData
}

var file_compass_heading_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_compass_heading_proto_goTypes = []any{
	(*CompassHeading)(nil),        // 0: sixafter.types.CompassHeading
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
}
var file_compass_heading_proto_depIdxs = []int32{
	1, // 0: sixafter.types.CompassHeading.timestamp:type_name -> google.protobuf.Timestamp
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_compass_heading_proto_init() }
func file_compass_heading_proto_init() {
	if File_compass_heading_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_compass_heading_proto_rawDesc), len(file_compass_heading_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_compass_heading_proto_goTypes,
		DependencyIndexes: file_compass_heading_proto_depIdxs,
		MessageInfos:      file_compass_heading_proto_msgTypes,
	}.Build()
	File_compass_heading_proto = out.File
	file_compass_heading_proto_goTypes = nil
	file_compass_heading_proto_depIdxs = nil
}
