// Copyright 2020-2024 SIX AFTER, INC (SIX AFTER)
//
// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: SIX AFTER, INC (SIX AFTER)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: language.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Language defines a human language using ISO 639 identifiers,
// with optional IETF BCP 47 tags for locale variants.
//
// Standards:
//   - ISO 639-1: two-letter codes (e.g., "en")
//   - ISO 639-3: three-letter codes (e.g., "eng")
//   - IETF BCP 47: tags combining language and optional script/region (e.g., "en-US", "zh-Hant-TW")
type Language struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// English name of the language.
	// Examples: "English", "Serbian", "Chinese".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ISO 639-1 two-letter code (lowercase).
	// Only set if the language has a 639-1 assignment.
	// Examples: "en", "sr", "zh".
	AlphabeticCode_2 string `protobuf:"bytes,2,opt,name=alphabetic_code_2,json=alphabeticCode2,proto3" json:"alphabetic_code_2,omitempty"`
	// ISO 639-3 three-letter code (lowercase).
	// Examples: "eng" (English), "srp" (Serbian), "zho" (Chinese), "yue" (Cantonese).
	AlphabeticCode_3 string `protobuf:"bytes,3,opt,name=alphabetic_code_3,json=alphabeticCode3,proto3" json:"alphabetic_code_3,omitempty"`
	// BCP 47 tags for locale-specific variants of the language.
	Bcp47Tag      []*Language_Bcp47Tag `protobuf:"bytes,4,rep,name=bcp47_tag,json=bcp47Tag,proto3" json:"bcp47_tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Language) Reset() {
	*x = Language{}
	mi := &file_language_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Language) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Language) ProtoMessage() {}

func (x *Language) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Language.ProtoReflect.Descriptor instead.
func (*Language) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{0}
}

func (x *Language) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Language) GetAlphabeticCode_2() string {
	if x != nil {
		return x.AlphabeticCode_2
	}
	return ""
}

func (x *Language) GetAlphabeticCode_3() string {
	if x != nil {
		return x.AlphabeticCode_3
	}
	return ""
}

func (x *Language) GetBcp47Tag() []*Language_Bcp47Tag {
	if x != nil {
		return x.Bcp47Tag
	}
	return nil
}

// Bcp47Tag holds a single BCP 47 language tag.
type Language_Bcp47Tag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Canonical BCP 47 tag string.
	// Examples: "en", "en-US", "sr-Cyrl-RS", "zh-Hant-TW".
	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// Human-readable label for display purposes.
	// Examples: "English (United States)", "Serbian (Cyrillic, Serbia)".
	DisplayName   string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Language_Bcp47Tag) Reset() {
	*x = Language_Bcp47Tag{}
	mi := &file_language_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Language_Bcp47Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Language_Bcp47Tag) ProtoMessage() {}

func (x *Language_Bcp47Tag) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Language_Bcp47Tag.ProtoReflect.Descriptor instead.
func (*Language_Bcp47Tag) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Language_Bcp47Tag) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Language_Bcp47Tag) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

var File_language_proto protoreflect.FileDescriptor

const file_language_proto_rawDesc = "" +
	"\n" +
	"\x0elanguage.proto\x12\x0esixafter.types\"\xf7\x01\n" +
	"\bLanguage\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12*\n" +
	"\x11alphabetic_code_2\x18\x02 \x01(\tR\x0falphabeticCode2\x12*\n" +
	"\x11alphabetic_code_3\x18\x03 \x01(\tR\x0falphabeticCode3\x12>\n" +
	"\tbcp47_tag\x18\x04 \x03(\v2!.sixafter.types.Language.Bcp47TagR\bbcp47Tag\x1a?\n" +
	"\bBcp47Tag\x12\x10\n" +
	"\x03tag\x18\x01 \x01(\tR\x03tag\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayNameBo\n" +
	"\x12com.sixafter.typesB\rLanguageProtoP\x01Z\x1fgithub.com/sixafter/types;types\xf8\x01\x01\xa2\x02\x03TPB\xaa\x02\x1dSixAfter.Types.WellKnownTypesb\x06proto3"

var (
	file_language_proto_rawDescOnce sync.Once
	file_language_proto_rawDescData []byte
)

func file_language_proto_rawDescGZIP() []byte {
	file_language_proto_rawDescOnce.Do(func() {
		file_language_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_language_proto_rawDesc), len(file_language_proto_rawDesc)))
	})
	return file_language_proto_rawDescData
}

var file_language_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_language_proto_goTypes = []any{
	(*Language)(nil),          // 0: sixafter.types.Language
	(*Language_Bcp47Tag)(nil), // 1: sixafter.types.Language.Bcp47Tag
}
var file_language_proto_depIdxs = []int32{
	1, // 0: sixafter.types.Language.bcp47_tag:type_name -> sixafter.types.Language.Bcp47Tag
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_language_proto_init() }
func file_language_proto_init() {
	if File_language_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_language_proto_rawDesc), len(file_language_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_language_proto_goTypes,
		DependencyIndexes: file_language_proto_depIdxs,
		MessageInfos:      file_language_proto_msgTypes,
	}.Build()
	File_language_proto = out.File
	file_language_proto_goTypes = nil
	file_language_proto_depIdxs = nil
}
