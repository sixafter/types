# Copyright (c) 2024-2025 Six After, Inc.
#
# This source code is licensed under the Apache 2.0 License found in the
# LICENSE file in the root directory of this source tree.

# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=jcroql
version: 2

snapshot:
  version_template: "{{ incpatch .Version }}-alpha"

# Ref: https://goreleaser.com/customization/builds/
project_name: types

builds:
  # Ref: https://goreleaser.com/errors/no-main/#if-you-are-building-a-library
  - skip: true

# Ref: https://goreleaser.com/customization/changelog/
changelog:
  # Sorts the changelog by the commit's messages.
  # Could either be asc, desc or empty
  # Empty means 'no sorting', it'll use the output of `git log` as is.
  sort: asc

  # Changelog generation implementation to use.
  #
  # Valid options are:
  # - `git`: uses `git log`;
  # - `github`: uses the compare GitHub API, appending the author username to the changelog.
  # - `gitlab`: uses the compare GitLab API, appending the author name and email to the changelog (requires a personal access token).
  # - `gitea`: uses the compare Gitea API, appending the author username to the changelog.
  # - `github-native`: uses the GitHub release notes generation API, disables the groups feature.
  #
  # Default: 'git'.
  use: github

  # Max commit hash length to use in the changelog.
  #
  # 0: use whatever the changelog implementation gives you
  # -1: remove the commit hash from the changelog
  # any other number: max length.
  abbrev: 0

  filters:
    # Commit messages matching the regexp listed here will be the only ones
    # added to the changelog
    #
    # If include is not-empty, exclude will be ignored.
    #
    # Matches are performed against the first line of the commit message only,
    # prefixed with the commit SHA1, usually in the form of
    # `<abbrev-commit>[:] <title-commit>`.
    include:
      - "(?i)^feature:"
      - "(?i)^defect:"
      - "(?i)^debt:"
      - "(?i)^risk:"

  # Group commits messages by given regex and title.
  # Order value defines the order of the groups.
  # Providing no regex means all commits will be grouped under the default group.
  #
  # Matches are performed against the first line of the commit message only,
  # prefixed with the commit SHA1, usually in the form of
  # `<abbrev-commit>[:] <title-commit>`.
  # Groups are disabled when using github-native, as it already groups things by itself.
  # Regex use RE2 syntax as defined here: https://github.com/google/re2/wiki/Syntax.
  groups:
    - title: "üéâ Features"
      regexp: '(?i)^.*?feature(\([[:word:]]+\))??!?:.+$'
      order: 0
    - title: "üêõ Defects"
      regexp: '(?i)^.*?defect(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: "üõ† Technical Debt"
      regexp: '(?i)^.*?debt(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: "üöÄ Technical Risk"
      regexp: '(?i)^.*?risk(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: Others
      order: 999

sboms:
  - artifacts: archive

release:
  name_template: 'v{{ .Version }}'
  footer: |
    **Full Changelog**: [CHANGELOG](https://github.com/sixafter/types/tree/main/CHANGELOG.md)
