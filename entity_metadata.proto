// Copyright 2020-2024 SIX AFTER, INC (SIX AFTER)
//
// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: SIX AFTER, INC (SIX AFTER)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax="proto3";

package sixafter.types;

option go_package="github.com/sixafter/types;types";
option cc_enable_arenas = true;
option java_package = "com.sixafter.types";
option java_multiple_files = true;
option java_outer_classname = "EntityMetadataProto";
option objc_class_prefix = "TPB";
option csharp_namespace = "SixAfter.Types.WellKnownTypes";

import "google/protobuf/timestamp.proto";
import "version.proto";

// The `EntityMetadata` message represents metadata associated with an entity.
// This includes timestamps, versioning, and additional descriptive properties,
// providing a comprehensive overview of the entity's lifecycle and characteristics.
message EntityMetadata {

  // The timestamp at which the entity was created.
  // Example: "2024-11-17T12:34:56Z" for an entity created on November 17, 2024.
  google.protobuf.Timestamp created_on = 1;

  // The timestamp at which the entity was last modified.
  // Example: "2024-11-18T08:20:45Z" for an entity last updated on November 18, 2024.
  google.protobuf.Timestamp modified_on = 2;

  // The timestamp at which the entity was deleted, if applicable.
  // Example: "2024-11-19T15:00:00Z" for an entity marked as deleted on November 19, 2024.
  google.protobuf.Timestamp deleted_on = 3;

  // Indicates whether the entity is ephemeral.
  // An ephemeral entity is temporary and may not be persisted or stored long-term.
  // Example: `true` for a session-based entity.
  bool is_ephemeral = 4;

  // Indicates whether the entity can be replicated with external sources.
  // Example: `true` for an entity designed to synchronize with external systems.
  bool is_replicable = 5;

  // Indicates whether the entity is immutable.
  // An immutable entity cannot be modified after creation.
  // Example: `true` for a cryptographic hash record.
  bool is_immutable = 6;

  // The Semantic Version v2.0 compliant version of the entity.
  // This provides versioning information for tracking changes and compatibility.
  // Example: Version `1.0.0` for the initial release of the entity.
  Version version = 7;

  // Indicates whether the entity was synthesized (or is synthetic).
  // A synthetic entity is derived or generated, rather than directly created by users.
  // Example: `true` for an entity generated by machine learning algorithms.
  bool is_synthetic = 8;

  // A list of tags associated with the entity.
  // Tags provide descriptive labels for categorization or search.
  // Tags must have:
  // - A minimum length of 1 character
  // - A maximum length of 256 characters
  // - A pattern matching "^[a-zA-Z0-9_-]+$" (alphanumeric, underscores, and hyphens).
  // Example: `["finance", "report2024"]` for an entity tagged as a 2024 finance report.
  repeated string tags = 9;

  // Custom extensions for additional metadata in key-value format.
  // The keys and values are strings, allowing flexible metadata descriptions.
  // Example: `{"source": "API", "priority": "high"}` for an entity from the API with high priority.
  map<string, string> extensions = 10;
}
