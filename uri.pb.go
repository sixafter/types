// Copyright 2020-2024 SIX AFTER, INC (SIX AFTER)
//
// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: SIX AFTER, INC (SIX AFTER)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: uri.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The `Uri` message represents a Uniform Resource Identifier (URI) as defined by
// [RFC 2396: Uniform Resource Identifiers (URI): Generic Syntax](http://www.ietf.org/rfc/rfc2396.txt),
// amended by [RFC 2732: Format for Literal IPv6 Addresses in URLs](http://www.ietf.org/rfc/rfc2732.txt).
// A URI is a compact string used to identify a resource in a generic syntax.
type Uri struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The scheme component of the URI.
	// Example: "https", "ftp", or "mailto".
	Scheme string `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// The fragment component of the URI.
	// This is the optional part of the URI that follows a "#" and provides an identifier
	// to a secondary resource.
	// Example: "section1" in "https://example.com/page#section1".
	Fragment string `protobuf:"bytes,2,opt,name=fragment,proto3" json:"fragment,omitempty"`
	// The host component of the URI.
	// This identifies the domain name or IP address of the resource.
	// Example: "example.com" or "192.168.1.1".
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	// The port number of the URI.
	// This is the optional number that specifies the communication port.
	// Example: 443 for HTTPS.
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// The query component of the URI.
	// This contains optional parameters appended to the URI, following a "?".
	// Example: "id=123&name=test" in "https://example.com/page?id=123&name=test".
	Query string `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	// The authority component of the URI.
	// This typically includes the host and port, and optionally the user-information.
	// Example: "user@example.com:8080" in "https://user@example.com:8080/resource".
	Authority string `protobuf:"bytes,6,opt,name=authority,proto3" json:"authority,omitempty"`
	// The user-information component of the URI.
	// This is the optional part before the host that provides user credentials.
	// Example: "user:password" in "https://user:password@example.com".
	UserInfo      string `protobuf:"bytes,7,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Uri) Reset() {
	*x = Uri{}
	mi := &file_uri_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Uri) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uri) ProtoMessage() {}

func (x *Uri) ProtoReflect() protoreflect.Message {
	mi := &file_uri_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uri.ProtoReflect.Descriptor instead.
func (*Uri) Descriptor() ([]byte, []int) {
	return file_uri_proto_rawDescGZIP(), []int{0}
}

func (x *Uri) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *Uri) GetFragment() string {
	if x != nil {
		return x.Fragment
	}
	return ""
}

func (x *Uri) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Uri) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Uri) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Uri) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *Uri) GetUserInfo() string {
	if x != nil {
		return x.UserInfo
	}
	return ""
}

var File_uri_proto protoreflect.FileDescriptor

const file_uri_proto_rawDesc = "" +
	"\n" +
	"\turi.proto\x12\x0esixafter.types\"\xb2\x01\n" +
	"\x03Uri\x12\x16\n" +
	"\x06scheme\x18\x01 \x01(\tR\x06scheme\x12\x1a\n" +
	"\bfragment\x18\x02 \x01(\tR\bfragment\x12\x12\n" +
	"\x04host\x18\x03 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x04 \x01(\x05R\x04port\x12\x14\n" +
	"\x05query\x18\x05 \x01(\tR\x05query\x12\x1c\n" +
	"\tauthority\x18\x06 \x01(\tR\tauthority\x12\x1b\n" +
	"\tuser_info\x18\a \x01(\tR\buserInfoBj\n" +
	"\x12com.sixafter.typesB\bUriProtoP\x01Z\x1fgithub.com/sixafter/types;types\xf8\x01\x01\xa2\x02\x03TPB\xaa\x02\x1dSixAfter.Types.WellKnownTypesb\x06proto3"

var (
	file_uri_proto_rawDescOnce sync.Once
	file_uri_proto_rawDescData []byte
)

func file_uri_proto_rawDescGZIP() []byte {
	file_uri_proto_rawDescOnce.Do(func() {
		file_uri_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_uri_proto_rawDesc), len(file_uri_proto_rawDesc)))
	})
	return file_uri_proto_rawDescData
}

var file_uri_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_uri_proto_goTypes = []any{
	(*Uri)(nil), // 0: sixafter.types.Uri
}
var file_uri_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_uri_proto_init() }
func file_uri_proto_init() {
	if File_uri_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_uri_proto_rawDesc), len(file_uri_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_uri_proto_goTypes,
		DependencyIndexes: file_uri_proto_depIdxs,
		MessageInfos:      file_uri_proto_msgTypes,
	}.Build()
	File_uri_proto = out.File
	file_uri_proto_goTypes = nil
	file_uri_proto_depIdxs = nil
}
