// Copyright 2020-2024 SIX AFTER, INC (SIX AFTER)
//
// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: SIX AFTER, INC (SIX AFTER)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v5.29.3
// source: geometry.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a scalar number using an unscaled integer value and a scale.
// The actual value is computed as:
//
//	value = unscaled_value * 10^(-scale)
//
// Examples:
// - To represent 12.34, set `unscaled_value = 1234` and `scale = 2`.
// - To represent -0.005, set `unscaled_value = -5` and `scale = 3`.
type Scalar struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stores the combined integer and fractional digits without the decimal point.
	UnscaledValue int64 `protobuf:"zigzag64,1,opt,name=unscaled_value,json=unscaledValue,proto3" json:"unscaled_value,omitempty"`
	// Specifies the number of decimal places (digits after the decimal point).
	Scale         uint32 `protobuf:"varint,2,opt,name=scale,proto3" json:"scale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scalar) Reset() {
	*x = Scalar{}
	mi := &file_geometry_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scalar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scalar) ProtoMessage() {}

func (x *Scalar) ProtoReflect() protoreflect.Message {
	mi := &file_geometry_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scalar.ProtoReflect.Descriptor instead.
func (*Scalar) Descriptor() ([]byte, []int) {
	return file_geometry_proto_rawDescGZIP(), []int{0}
}

func (x *Scalar) GetUnscaledValue() int64 {
	if x != nil {
		return x.UnscaledValue
	}
	return 0
}

func (x *Scalar) GetScale() uint32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

// Represents a coordinate system used to interpret geometric entities.
// Example: Cartesian, Polar, Spherical, Homogeneous.
type CoordinateSystem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the coordinate system (e.g., Cartesian, Polar).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional parameters defining the coordinate system (e.g., dimensionality, radius for polar systems).
	Parameters    map[string]string `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoordinateSystem) Reset() {
	*x = CoordinateSystem{}
	mi := &file_geometry_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoordinateSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordinateSystem) ProtoMessage() {}

func (x *CoordinateSystem) ProtoReflect() protoreflect.Message {
	mi := &file_geometry_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordinateSystem.ProtoReflect.Descriptor instead.
func (*CoordinateSystem) Descriptor() ([]byte, []int) {
	return file_geometry_proto_rawDescGZIP(), []int{1}
}

func (x *CoordinateSystem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoordinateSystem) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Represents the geometry type, abstracting the mathematical space.
// Example: Euclidean, Hyperbolic, Elliptic.
type GeometryType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the geometry type (e.g., Euclidean, Hyperbolic).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional parameters for the geometry (e.g., curvature, dimensionality).
	Parameters    map[string]string `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeometryType) Reset() {
	*x = GeometryType{}
	mi := &file_geometry_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeometryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeometryType) ProtoMessage() {}

func (x *GeometryType) ProtoReflect() protoreflect.Message {
	mi := &file_geometry_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeometryType.ProtoReflect.Descriptor instead.
func (*GeometryType) Descriptor() ([]byte, []int) {
	return file_geometry_proto_rawDescGZIP(), []int{2}
}

func (x *GeometryType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GeometryType) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Represents a coordinate in an n-dimensional space.
// The coordinate is defined within a specified geometry and coordinate system,
// using fixed-point numbers for precision.
//
// Examples:
//   - A 2D Cartesian coordinate (3.5, -2.1) in Euclidean geometry:
//     geometry_type = EUCLIDEAN
//     coordinate_system = EUCLIDEAN_CARTESIAN
//     values = [{unscaled_value: 35, scale: 1}, {unscaled_value: -21, scale: 1}]
type Coordinate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The n-dimensional coordinate values.
	Values []*Scalar `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	// The geometry type (e.g., Euclidean, Hyperbolic).
	GeometryType *GeometryType `protobuf:"bytes,2,opt,name=geometry_type,json=geometryType,proto3" json:"geometry_type,omitempty"`
	// The coordinate system (e.g., Cartesian, Polar).
	CoordinateSystem *CoordinateSystem `protobuf:"bytes,3,opt,name=coordinate_system,json=coordinateSystem,proto3" json:"coordinate_system,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Coordinate) Reset() {
	*x = Coordinate{}
	mi := &file_geometry_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Coordinate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinate) ProtoMessage() {}

func (x *Coordinate) ProtoReflect() protoreflect.Message {
	mi := &file_geometry_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinate.ProtoReflect.Descriptor instead.
func (*Coordinate) Descriptor() ([]byte, []int) {
	return file_geometry_proto_rawDescGZIP(), []int{3}
}

func (x *Coordinate) GetValues() []*Scalar {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Coordinate) GetGeometryType() *GeometryType {
	if x != nil {
		return x.GeometryType
	}
	return nil
}

func (x *Coordinate) GetCoordinateSystem() *CoordinateSystem {
	if x != nil {
		return x.CoordinateSystem
	}
	return nil
}

// Represents a point in a mathematical space.
//
// Examples:
//   - A point in 3D Euclidean space:
//     position.geometry_type = EUCLIDEAN
//     position.coordinate_system = EUCLIDEAN_CARTESIAN
//     position.values = [{unscaled_value: 10, scale: 0}, {unscaled_value: 0, scale: 0}, {unscaled_value: -5, scale: 0}]
type Point struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The coordinate defining the position of the point.
	Position      *Coordinate `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Point) Reset() {
	*x = Point{}
	mi := &file_geometry_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_geometry_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_geometry_proto_rawDescGZIP(), []int{4}
}

func (x *Point) GetPosition() *Coordinate {
	if x != nil {
		return x.Position
	}
	return nil
}

// Represents a line or geodesic in a mathematical space.
//
// Examples:
//   - A line between two points in 2D Cartesian space:
//     start.position.values = [{unscaled_value: 0, scale: 0}, {unscaled_value: 0, scale: 0}]
//     end.position.values = [{unscaled_value: 10, scale: 0}, {unscaled_value: 10, scale: 0}]
type Line struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The starting point of the line.
	Start *Point `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// The ending point of the line.
	End           *Point `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Line) Reset() {
	*x = Line{}
	mi := &file_geometry_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Line) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Line) ProtoMessage() {}

func (x *Line) ProtoReflect() protoreflect.Message {
	mi := &file_geometry_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Line.ProtoReflect.Descriptor instead.
func (*Line) Descriptor() ([]byte, []int) {
	return file_geometry_proto_rawDescGZIP(), []int{5}
}

func (x *Line) GetStart() *Point {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Line) GetEnd() *Point {
	if x != nil {
		return x.End
	}
	return nil
}

// Represents a polygon in a mathematical space.
// A polygon is defined by a series of vertices, and it may or may not be closed.
//
// Examples:
//   - A triangle in 2D Cartesian space:
//     vertices = [
//     {position.values = [{unscaled_value: 0, scale: 0}, {unscaled_value: 0, scale: 0}]},
//     {position.values = [{unscaled_value: 10, scale: 0}, {unscaled_value: 0, scale: 0}]},
//     {position.values = [{unscaled_value: 5, scale: 0}, {unscaled_value: 10, scale: 0}]}
//     ]
//     is_closed = true
type Polygon struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The vertices of the polygon.
	Vertices []*Point `protobuf:"bytes,1,rep,name=vertices,proto3" json:"vertices,omitempty"`
	// True if the polygon is explicitly closed.
	IsClosed      bool `protobuf:"varint,2,opt,name=is_closed,json=isClosed,proto3" json:"is_closed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Polygon) Reset() {
	*x = Polygon{}
	mi := &file_geometry_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Polygon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Polygon) ProtoMessage() {}

func (x *Polygon) ProtoReflect() protoreflect.Message {
	mi := &file_geometry_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Polygon.ProtoReflect.Descriptor instead.
func (*Polygon) Descriptor() ([]byte, []int) {
	return file_geometry_proto_rawDescGZIP(), []int{6}
}

func (x *Polygon) GetVertices() []*Point {
	if x != nil {
		return x.Vertices
	}
	return nil
}

func (x *Polygon) GetIsClosed() bool {
	if x != nil {
		return x.IsClosed
	}
	return false
}

var File_geometry_proto protoreflect.FileDescriptor

const file_geometry_proto_rawDesc = "" +
	"\n" +
	"\x0egeometry.proto\x12\x0esixafter.types\"E\n" +
	"\x06Scalar\x12%\n" +
	"\x0eunscaled_value\x18\x01 \x01(\x12R\runscaledValue\x12\x14\n" +
	"\x05scale\x18\x02 \x01(\rR\x05scale\"\xb7\x01\n" +
	"\x10CoordinateSystem\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12P\n" +
	"\n" +
	"parameters\x18\x02 \x03(\v20.sixafter.types.CoordinateSystem.ParametersEntryR\n" +
	"parameters\x1a=\n" +
	"\x0fParametersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xaf\x01\n" +
	"\fGeometryType\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12L\n" +
	"\n" +
	"parameters\x18\x02 \x03(\v2,.sixafter.types.GeometryType.ParametersEntryR\n" +
	"parameters\x1a=\n" +
	"\x0fParametersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xce\x01\n" +
	"\n" +
	"Coordinate\x12.\n" +
	"\x06values\x18\x01 \x03(\v2\x16.sixafter.types.ScalarR\x06values\x12A\n" +
	"\rgeometry_type\x18\x02 \x01(\v2\x1c.sixafter.types.GeometryTypeR\fgeometryType\x12M\n" +
	"\x11coordinate_system\x18\x03 \x01(\v2 .sixafter.types.CoordinateSystemR\x10coordinateSystem\"?\n" +
	"\x05Point\x126\n" +
	"\bposition\x18\x01 \x01(\v2\x1a.sixafter.types.CoordinateR\bposition\"\\\n" +
	"\x04Line\x12+\n" +
	"\x05start\x18\x01 \x01(\v2\x15.sixafter.types.PointR\x05start\x12'\n" +
	"\x03end\x18\x02 \x01(\v2\x15.sixafter.types.PointR\x03end\"Y\n" +
	"\aPolygon\x121\n" +
	"\bvertices\x18\x01 \x03(\v2\x15.sixafter.types.PointR\bvertices\x12\x1b\n" +
	"\tis_closed\x18\x02 \x01(\bR\bisClosedBo\n" +
	"\x12com.sixafter.typesB\rGeometryProtoP\x01Z\x1fgithub.com/sixafter/types;types\xf8\x01\x01\xa2\x02\x03TPB\xaa\x02\x1dSixAfter.Types.WellKnownTypesb\x06proto3"

var (
	file_geometry_proto_rawDescOnce sync.Once
	file_geometry_proto_rawDescData []byte
)

func file_geometry_proto_rawDescGZIP() []byte {
	file_geometry_proto_rawDescOnce.Do(func() {
		file_geometry_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_geometry_proto_rawDesc), len(file_geometry_proto_rawDesc)))
	})
	return file_geometry_proto_rawDescData
}

var file_geometry_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_geometry_proto_goTypes = []any{
	(*Scalar)(nil),           // 0: sixafter.types.Scalar
	(*CoordinateSystem)(nil), // 1: sixafter.types.CoordinateSystem
	(*GeometryType)(nil),     // 2: sixafter.types.GeometryType
	(*Coordinate)(nil),       // 3: sixafter.types.Coordinate
	(*Point)(nil),            // 4: sixafter.types.Point
	(*Line)(nil),             // 5: sixafter.types.Line
	(*Polygon)(nil),          // 6: sixafter.types.Polygon
	nil,                      // 7: sixafter.types.CoordinateSystem.ParametersEntry
	nil,                      // 8: sixafter.types.GeometryType.ParametersEntry
}
var file_geometry_proto_depIdxs = []int32{
	7, // 0: sixafter.types.CoordinateSystem.parameters:type_name -> sixafter.types.CoordinateSystem.ParametersEntry
	8, // 1: sixafter.types.GeometryType.parameters:type_name -> sixafter.types.GeometryType.ParametersEntry
	0, // 2: sixafter.types.Coordinate.values:type_name -> sixafter.types.Scalar
	2, // 3: sixafter.types.Coordinate.geometry_type:type_name -> sixafter.types.GeometryType
	1, // 4: sixafter.types.Coordinate.coordinate_system:type_name -> sixafter.types.CoordinateSystem
	3, // 5: sixafter.types.Point.position:type_name -> sixafter.types.Coordinate
	4, // 6: sixafter.types.Line.start:type_name -> sixafter.types.Point
	4, // 7: sixafter.types.Line.end:type_name -> sixafter.types.Point
	4, // 8: sixafter.types.Polygon.vertices:type_name -> sixafter.types.Point
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_geometry_proto_init() }
func file_geometry_proto_init() {
	if File_geometry_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_geometry_proto_rawDesc), len(file_geometry_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_geometry_proto_goTypes,
		DependencyIndexes: file_geometry_proto_depIdxs,
		MessageInfos:      file_geometry_proto_msgTypes,
	}.Build()
	File_geometry_proto = out.File
	file_geometry_proto_goTypes = nil
	file_geometry_proto_depIdxs = nil
}
