// Copyright 2020-2024 SIX AFTER, INC (SIX AFTER)
//
// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: SIX AFTER, INC (SIX AFTER)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: uuid.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// UUID represents a Universally Unique Identifier (UUID/GUID) according to RFC 4122.
// The value field MUST be exactly 16 bytes in length (128 bits).
//
// This message provides an efficient and canonical binary representation for UUIDs
// in Protobuf. The 16-byte value corresponds to the standard RFC 4122 byte layout
// and is directly compatible with native UUID/GUID types in most languages.
//
// Note: The Protobuf schema cannot enforce the 16-byte length constraint;
// validation must be performed in application code or by a validation framework.
type UUID struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The 128-bit (16 byte) UUID value.
	//
	// MUST be exactly 16 bytes.
	// The value should follow the canonical RFC 4122 binary encoding.
	// If the value is not 16 bytes, the message is considered invalid.
	Value         []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UUID) Reset() {
	*x = UUID{}
	mi := &file_uuid_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUID) ProtoMessage() {}

func (x *UUID) ProtoReflect() protoreflect.Message {
	mi := &file_uuid_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUID.ProtoReflect.Descriptor instead.
func (*UUID) Descriptor() ([]byte, []int) {
	return file_uuid_proto_rawDescGZIP(), []int{0}
}

func (x *UUID) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_uuid_proto protoreflect.FileDescriptor

const file_uuid_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"uuid.proto\x12\x0esixafter.types\"\x1c\n" +
	"\x04UUID\x12\x14\n" +
	"\x05value\x18\x01 \x01(\fR\x05valueBk\n" +
	"\x12com.sixafter.typesB\tUuidProtoP\x01Z\x1fgithub.com/sixafter/types;types\xf8\x01\x01\xa2\x02\x03TPB\xaa\x02\x1dSixAfter.Types.WellKnownTypesb\x06proto3"

var (
	file_uuid_proto_rawDescOnce sync.Once
	file_uuid_proto_rawDescData []byte
)

func file_uuid_proto_rawDescGZIP() []byte {
	file_uuid_proto_rawDescOnce.Do(func() {
		file_uuid_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_uuid_proto_rawDesc), len(file_uuid_proto_rawDesc)))
	})
	return file_uuid_proto_rawDescData
}

var file_uuid_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_uuid_proto_goTypes = []any{
	(*UUID)(nil), // 0: sixafter.types.UUID
}
var file_uuid_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_uuid_proto_init() }
func file_uuid_proto_init() {
	if File_uuid_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_uuid_proto_rawDesc), len(file_uuid_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_uuid_proto_goTypes,
		DependencyIndexes: file_uuid_proto_depIdxs,
		MessageInfos:      file_uuid_proto_msgTypes,
	}.Build()
	File_uuid_proto = out.File
	file_uuid_proto_goTypes = nil
	file_uuid_proto_depIdxs = nil
}
