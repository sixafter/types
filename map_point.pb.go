// Copyright 2020-2024 SIX AFTER, INC (SIX AFTER)
//
// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: SIX AFTER, INC (SIX AFTER)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: map_point.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The `MapPoint` message represents a point on a two-dimensional map,
// derived from projecting the curved surface of the globe onto a flat surface.
// This structure is commonly used in mapping, GIS, and location-based applications.
type MapPoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The x-coordinate of the map point.
	// Represents the horizontal position on the two-dimensional map.
	// Example: A value of 200.5 could represent a position on a Mercator projection.
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	// The y-coordinate of the map point.
	// Represents the vertical position on the two-dimensional map.
	// Example: A value of 150.2 could represent a position on a Mercator projection.
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	// The geospatial coordinate that corresponds to the map point.
	// Provides the latitude, longitude, and elevation information for the point.
	// Example: A map point with `x=200.5` and `y=150.2` could correspond to
	// `latitude=32.9829` and `longitude=-97.1876` for Westlake, Texas.
	Coordinate    *GeospatialCoordinate `protobuf:"bytes,3,opt,name=coordinate,proto3" json:"coordinate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapPoint) Reset() {
	*x = MapPoint{}
	mi := &file_map_point_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapPoint) ProtoMessage() {}

func (x *MapPoint) ProtoReflect() protoreflect.Message {
	mi := &file_map_point_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapPoint.ProtoReflect.Descriptor instead.
func (*MapPoint) Descriptor() ([]byte, []int) {
	return file_map_point_proto_rawDescGZIP(), []int{0}
}

func (x *MapPoint) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *MapPoint) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *MapPoint) GetCoordinate() *GeospatialCoordinate {
	if x != nil {
		return x.Coordinate
	}
	return nil
}

var File_map_point_proto protoreflect.FileDescriptor

const file_map_point_proto_rawDesc = "" +
	"\n" +
	"\x0fmap_point.proto\x12\x0esixafter.types\x1a\x1bgeospatial_coordinate.proto\"l\n" +
	"\bMapPoint\x12\f\n" +
	"\x01x\x18\x01 \x01(\x02R\x01x\x12\f\n" +
	"\x01y\x18\x02 \x01(\x02R\x01y\x12D\n" +
	"\n" +
	"coordinate\x18\x03 \x01(\v2$.sixafter.types.GeospatialCoordinateR\n" +
	"coordinateBo\n" +
	"\x12com.sixafter.typesB\rMapPointProtoP\x01Z\x1fgithub.com/sixafter/types;types\xf8\x01\x01\xa2\x02\x03TPB\xaa\x02\x1dSixAfter.Types.WellKnownTypesb\x06proto3"

var (
	file_map_point_proto_rawDescOnce sync.Once
	file_map_point_proto_rawDescData []byte
)

func file_map_point_proto_rawDescGZIP() []byte {
	file_map_point_proto_rawDescOnce.Do(func() {
		file_map_point_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_map_point_proto_rawDesc), len(file_map_point_proto_rawDesc)))
	})
	return file_map_point_proto_rawDescData
}

var file_map_point_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_map_point_proto_goTypes = []any{
	(*MapPoint)(nil),             // 0: sixafter.types.MapPoint
	(*GeospatialCoordinate)(nil), // 1: sixafter.types.GeospatialCoordinate
}
var file_map_point_proto_depIdxs = []int32{
	1, // 0: sixafter.types.MapPoint.coordinate:type_name -> sixafter.types.GeospatialCoordinate
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_map_point_proto_init() }
func file_map_point_proto_init() {
	if File_map_point_proto != nil {
		return
	}
	file_geospatial_coordinate_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_map_point_proto_rawDesc), len(file_map_point_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_map_point_proto_goTypes,
		DependencyIndexes: file_map_point_proto_depIdxs,
		MessageInfos:      file_map_point_proto_msgTypes,
	}.Build()
	File_map_point_proto = out.File
	file_map_point_proto_goTypes = nil
	file_map_point_proto_depIdxs = nil
}
